generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model parent {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name   String    @db.VarChar(255)
  last_name    String    @db.VarChar(255)
  user_id      String    @db.Uuid
  phone_number String?   @db.VarChar(20)
  address      String?   @db.VarChar(255)
  birth_date   DateTime? @db.Timestamp(6)
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  user         user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model school {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description      String?        @db.VarChar(255)
  address          String?        @db.VarChar(255)
  established_year Int?
  school_type      String?        @db.VarChar(255)
  name             String         @db.VarChar(255)
  created_at       DateTime       @default(now()) @db.Timestamp(6)
  updated_at       DateTime       @default(now()) @db.Timestamp(6)
  user_id          String         @db.Uuid
  tenant_id        String         @db.VarChar(255)
  user             user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  school_owner     school_owner[]
  staff            staff[]
  teacher          teacher[]
}

model school_owner {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name   String    @db.VarChar(255)
  last_name    String    @db.VarChar(255)
  user_id      String    @db.Uuid
  school_id    String    @db.Uuid
  phone_number String?   @db.VarChar(20)
  address      String?   @db.VarChar(255)
  birth_date   DateTime? @db.Timestamp(6)
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  school       school    @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model staff {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name String    @db.VarChar(255)
  last_name  String    @db.VarChar(255)
  role       String    @db.VarChar(255)
  user_id    String    @db.Uuid
  school_id  String    @db.Uuid
  start_date DateTime? @db.Timestamp(6)
  end_date   DateTime? @db.Timestamp(6)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  school     school    @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model teacher {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name     String    @db.VarChar(255)
  last_name      String    @db.VarChar(255)
  user_id        String    @db.Uuid
  school_id      String    @db.Uuid
  start_date     DateTime? @db.Timestamp(6)
  end_date       DateTime? @db.Timestamp(6)
  specialization String?   @db.VarChar(255)
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  updated_at     DateTime  @default(now()) @db.Timestamp(6)
  school         school    @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  parent       parent[]
  school       school[]
  school_owner school_owner[]
  staff        staff[]
  teacher      teacher[]
}
